<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:cxf="http://camel.apache.org/schema/cxf" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd         
    http://camel.apache.org/schema/spring 
    http://camel.apache.org/schema/spring/camel-spring.xsd          
    http://camel.apache.org/schema/cxf 
    http://camel.apache.org/schema/cxf/camel-cxf.xsd">

	<!-- this is the JDBC data source which uses a MySQL database -->
	<bean class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" id="dataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/ws_prueba" />
		<property name="username" value="${wom.database.username}" />
		<property name="password" value="${wom.database.password}" />
	</bean>

	<!-- configure the Camel SQL component to use the JDBC data source -->
	<bean class="org.apache.camel.component.sql.SqlComponent" id="sql">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- Proyecto apache camel que permite realizar un proxy entre servicios 
		del tipo SOAP -->

	<camelContext id="s03-proxy" xmlns="http://camel.apache.org/schema/spring"
		xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ws="http://ws.webservices.pos.nextel.cl.com">
		<!-- Cargamos el archivo de propiedades correspondiente al ambiente NOTA: 
			esto debe ser descomentado para subir a openshift, se debe eliminar el espacio 
			entre "$ {" y comentar o eliminar la linea donde se encuentra en duro el 
			archivo properties. Por defecto en opensfhit es develop -->
		<!-- <propertyPlaceholder id="placeholder" location="classpath:$ {env:PFX_ENV}.properties"/> -->
		<propertyPlaceholder id="placeholder"
			location="classpath:application.properties,classpath:sql.properties" />


		<onException>
			<exception>java.lang.Exception</exception>
			<redeliveryPolicy maximumRedeliveries="{{camel.timeout.max-delivery}}"
				redeliveryDelay="{{camel.timeout.redelivery-delay}}" />
		</onException>

<!-- autoProvisionVoLTE  -->
		<route streamCache="true">
			<from
				uri="cxf:http://{{srv40011.soap.v1.0.host}}:{{srv40011.activateVoLTENetwork.soap.v1.0.port}}/{{srv40011.activateVoLTENetwork.soap.v1.0.name}}/?wsdlURL={{srv40011.activateVoLTENetwork.soap.v1.0.wsdlURL}}&amp;serviceName={{srv40011.activateVoLTENetwork.soap.v1.0.serviceName}}&amp;portName={{srv40011.activateVoLTENetwork.soap.v1.0.portName}}&amp;dataFormat=MESSAGE" />

			<setProperty propertyName="autoProvisioningType">
				<xpath resultType="java.lang.Integer">/soapenv:Envelope/soapenv:Body/ws:NewOperation/AutoProvisioningType/text()
				</xpath>
			</setProperty>

<!-- se realiza el insert en la base de datos iniciando la fecha -->
			<split>
				<simple>true</simple>
				<to uri="sql:{{sql.registerFechaInit}}" />
			</split>


			<log loggingLevel="INFO"
				message="pasando por servicio REST body: ${property.autoProvisioningType}" />


			<to
				uri="cxf:http://{{srv40011.soap.v1.0.host}}:{{srv40011.activateVoLTENetwork2.soap.v1.0.port}}/{{srv40011.activateVoLTENetwork.soap.v1.0.name}}/?dataFormat=MESSAGE" />


			<split>

				<simple>true</simple>
				<setHeader headerName="id">
					<simple>${property.autoProvisioningType}</simple>
				</setHeader>

				<to uri="sql:{{sql.registerFechaEnd}}" />
			</split>


			<setHeader headerName="resultCode">
				<xpath resultType="java.lang.Integer">/soapenv:Envelope/soapenv:Body/Result/ResultCode/text()
				</xpath>
			</setHeader>

			<choice>
				<when>
					<simple>${headers.resultCode} != 1</simple>
					<log
						message="aqui se debe implementar el otro TO al servicio o lo que corresponda" />
					<setHeader headerName="no_ok">
						<constant>NO OK</constant>
					</setHeader>
					<to
						uri="cxf:http://{{srv40011.soap.v1.0.host}}:{{srv40011.activateVoLTEBSCS.soap.v1.0.port}}/{{srv40011.activateVoLTEBSCS.soap.v1.0.name}}/?wsdlURL={{srv40011.activateVoLTENetwork.soap.v1.0.wsdlURL}}&amp;serviceName={{srv40011.activateVoLTENetwork.soap.v1.0.serviceName}}&amp;portName={{srv40011.activateVoLTENetwork.soap.v1.0.portName}}&amp;dataFormat=MESSAGE" />

					<setHeader headerName="resultCode">
						<xpath resultType="java.lang.Integer">/soapenv:Envelope/soapenv:Body/Result/ResultCode/text()
						</xpath>
					</setHeader>

				</when>
				<when>
					<simple>${headers.resultCode} == 1</simple>
					<setHeader headerName="no_ok">
						<constant>OK</constant>
					</setHeader>
				</when>
			</choice>

		</route>

		<!-- soap virtual activateVoLTENetwork -->
		<route streamCache="true">
			<from
				uri="cxf:http://{{srv40011.soap.v1.0.host}}:{{srv40011.activateVoLTENetwork2.soap.v1.0.port}}/{{srv40011.activateVoLTENetwork.soap.v1.0.name}}/?wsdlURL={{srv40011.activateVoLTENetwork.soap.v1.0.wsdlURL}}&amp;serviceName={{srv40011.activateVoLTENetwork.soap.v1.0.serviceName}}&amp;portName={{srv40011.activateVoLTENetwork.soap.v1.0.portName}}&amp;dataFormat=MESSAGE" />

			<to uri="velocity:velocity/activateVoLTENetworkResponse.vm" />

		</route>

		<!-- soap virtual activateVoLTEBSCS -->
		<route streamCache="true">
			<from
				uri="cxf:http://{{srv40011.soap.v1.0.host}}:{{srv40011.activateVoLTEBSCS.soap.v1.0.port}}/{{srv40011.activateVoLTEBSCS.soap.v1.0.name}}/?wsdlURL={{srv40011.activateVoLTENetwork.soap.v1.0.wsdlURL}}&amp;serviceName={{srv40011.activateVoLTENetwork.soap.v1.0.serviceName}}&amp;portName={{srv40011.activateVoLTENetwork.soap.v1.0.portName}}&amp;dataFormat=MESSAGE" />

			<log message="soap virtual activateVoLTEBSCS" />


			<to uri="velocity:velocity/activateVoLTENetworkResponse.vm" />

			<setHeader headerName="resultCode">
				<xpath resultType="java.lang.Integer">/soapenv:Envelope/soapenv:Body/Result/ResultCode/text()
				</xpath>
			</setHeader>

			<choice>
				<when>
					<simple>${headers.resultCode} != 1</simple>
					<log
						message="aqui se debe implementar el otro TO al servicio o lo que corresponda2" />

					<setHeader headerName="no_ok">
						<constant>NO OK</constant>
					</setHeader>

				</when>
				<when>
					<simple>${headers.resultCode} == 1</simple>
					<setHeader headerName="no_ok">
						<constant>OK</constant>
					</setHeader>
				</when>
			</choice>


		</route>

	</camelContext>
</beans>