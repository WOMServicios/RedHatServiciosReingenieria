<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://camel.apache.org/schema/spring 
	http://camel.apache.org/schema/spring/camel-spring.xsd">

	<bean id="dataSourceBSCSDESA"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@${database.replica.host}:${database.replica.port}:${database.replica.name}" />
		<property name="username"
			value="${database.replica.username}" />
		<property name="password"
			value="${database.replica.password}" />

	</bean>

	<bean id="dataSourceWAPPLDESA"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@${database.wappl.host}:${database.wappl.port}:${database.wappl.name}" />
		<property name="username" value="${database.wappl.username}" />
		<property name="password" value="${database.wappl.password}" />

	</bean>




	<bean id="clienteProcessor" class="cl.wom.util.ClienteProcessor">
	</bean>

	<camelContext
		id="camelContext-0423f187-258d-455e-82e8-783bcda7f4af"
		xmlns="http://camel.apache.org/schema/spring">
		<!--Cargamos el archivo de propiedades correspondiente al ambiente NOTA: 
			esto debe ser descomentado para subir a openshift, se debe eliminar el espacio 
			entre "$ {" y comentar o eliminar la linea donde se encuentra en duro el 
			archivo properties. Por defecto en opensfhit es develop -->
		<!--<propertyPlaceholder id="placeholder" location="classpath:$ {env:PFX_ENV}.properties"/> -->

		<propertyPlaceholder id="placeholder"
			location="classpath:application.properties,classpath:sql.properties" />

		<onException>
			<exception>cl.wom.exception.services.ServiceError</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
				<simple>${exception.codigoError}</simple>
			</setHeader>
			<setHeader headerName="codigoError">
				<simple>${exception.codigoError}</simple>
			</setHeader>
			<setHeader headerName="messageError">
				<simple>${exception.message}</simple>
			</setHeader>
			<setHeader headerName="Content-Type">
				<constant>application/json</constant>
			</setHeader>
			<to uri="velocity:velocity/ErrorHttp.vm" />

		</onException>

		<!-- getcarrierbillingoffers -->
		<route streamCache="true">
					<from
				uri="restlet:http://{{rest.service.host}}:{{rest.service.port}}{{rest.service.resource}}?restletMethod=post" / />
			<setHeader headerName="Accept">
				<constant>application/json</constant>
			</setHeader>
			<setHeader headerName="Content-Type">
				<constant>application/json</constant>
			</setHeader>
			<doTry>
				<setHeader headerName="credential">
					<jsonpath>$.credential</jsonpath>
				</setHeader>
				<setHeader headerName="credentialType">
					<jsonpath>$.credentialType</jsonpath>
				</setHeader>
				<setHeader headerName="channel">
					<jsonpath>$.channel</jsonpath>
				</setHeader>
				<setHeader headerName="networkKey">
					<jsonpath>$.networkKey</jsonpath>
				</setHeader>
				<doCatch>
					<exception>org.apache.camel.ExpressionEvaluationException
					</exception>
					<setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
						<simple>400</simple>
					</setHeader>
					<to uri="velocity:velocity/400.vm" />
					<setHeader headerName="Content-Type">
						<constant>application/json</constant>
					</setHeader>
					<stop />
				</doCatch>
			</doTry>
			<choice>
				<when>
					<simple>
						${headers.credential} == "" ||
						${headers.credentialType} ==
						"" ||
						${headers.channel} == "" ||
						${headers.networkKey} == ""
					</simple>
					<throwException
						exceptionType="cl.wom.exception.services.ServiceError"
						message="400" />
				</when>

				<otherwise>


					<setBody>
						<simple>{{sql.getsubcriberBymsisdn}}</simple>
					</setBody>

					<to uri="jdbc:dataSourceBSCSDESA" />

					<to uri="bean:clienteProcessor" />


					<when>
						<simple>${body.msisdn} == null</simple>

						<setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
							<simple>200</simple>
						</setHeader>
						<setHeader headerName="Content-Type">
							<constant>application/json</constant>
						</setHeader>
						<to uri="velocity:velocity/204.vm" />

						<stop />


					</when>

					<when>
						<simple>${body.msisdn} != null</simple>


						<to uri="velocity:velocity/netflixStart.vm" />
						<to
							uri="restlet:http://0.0.0.0:8888/bango.net/HTTP/Netflix/Start/?restletMethod=post" />

					</when>

				</otherwise>
			</choice>

			<setHeader headerName="Content-Type">
				<constant>application/json</constant>
			</setHeader>
		</route>

		<route>
			<from
				uri="restlet:http://0.0.0.0:8888/bango.net/HTTP/Netflix/Start/?restletMethod=post" />
			<to uri="velocity:velocity/netflixResponse.vm" />
		</route>


	</camelContext>
</beans>