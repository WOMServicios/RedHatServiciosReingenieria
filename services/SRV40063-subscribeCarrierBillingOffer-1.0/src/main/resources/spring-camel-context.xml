<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  http://camel.apache.org/schema/spring   http://camel.apache.org/schema/spring/camel-spring.xsd">
	<bean class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" id="dataSourceBSCSDESA">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@${database.replica.host}:${database.replica.port}:${database.replica.name}" />
		<property name="username"
			value="${database.replica.username}" />
		<property name="password"
			value="${database.replica.password}" />
	</bean>
	<bean class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" id="dataSourceWAPPLDESA">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@${database.wappl.host}:${database.wappl.port}:${database.wappl.name}" />
		<property name="username" value="${database.wappl.username}" />
		<property name="password" value="${database.wappl.password}" />
	</bean>
	<bean class="cl.wom.util.ClienteProcessor" id="clienteProcessor" />
	<camelContext
		id="camelContext-0423f187-258d-455e-82e8-783bcda7f4af"
		xmlns="http://camel.apache.org/schema/spring">
		<!--Cargamos el archivo de propiedades correspondiente al ambiente NOTA: 
			esto debe ser descomentado para subir a openshift, se debe eliminar el espacio 
			entre "$ {" y comentar o eliminar la linea donde se encuentra en duro el 
			archivo properties. Por defecto en opensfhit es develop -->
		<!--<propertyPlaceholder id="placeholder" location="classpath:$ {env:PFX_ENV}.properties"/> -->
		<propertyPlaceholder id="placeholder"
			location="classpath:application.properties,classpath:sql.properties" />
		<onException>
			<exception>cl.wom.exception.services.ServiceError</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
				<simple>${exception.codigoError}</simple>
			</setHeader>
			<setHeader headerName="codigoError">
				<simple>${exception.codigoError}</simple>
			</setHeader>
			<setHeader headerName="messageError">
				<simple>${exception.message}</simple>
			</setHeader>
			<setHeader headerName="Content-Type">
				<constant>application/json</constant>
			</setHeader>
			<to uri="velocity:velocity/ErrorHttp.vm" />
		</onException>
		<!-- getcarrierbillingoffers -->
		<route id="_route1" streamCache="true">
			<from id="_from1"
				uri="restlet:http://{{rest.service.host}}:{{rest.service.port}}{{rest.service.resource}}?restletMethod=post" />
		
			<doTry id="_doTry1">
				<setHeader headerName="credential" id="_setHeader3">
					<jsonpath>$.credential</jsonpath>
				</setHeader>
				<setHeader headerName="credentialType" id="_setHeader4">
					<jsonpath>$.credentialType</jsonpath>
				</setHeader>
				<setHeader headerName="channel" id="_setHeader5">
					<jsonpath>$.channel</jsonpath>
				</setHeader>
				<setHeader headerName="networkKey" id="_setHeader6">
					<jsonpath>$.networkKey</jsonpath>
				</setHeader>
				<doCatch id="_doCatch1">
					<exception>org.apache.camel.ExpressionEvaluationException
					</exception>
					<setHeader headerName="Exchange.HTTP_RESPONSE_CODE"
						id="_setHeader7">
						<simple>400</simple>
					</setHeader>
					<to id="_to1" uri="velocity:velocity/400.vm" />
					<setHeader headerName="Content-Type" id="_setHeader8">
						<constant>application/json</constant>
					</setHeader>
					<stop id="_stop1" />
				</doCatch>
			</doTry>
			<choice id="_choice1">
				<when id="_when1">
					<simple>
						${headers.credential} == "" ||
						${headers.credentialType} ==
						"" ||
						${headers.channel} == "" ||
						${headers.networkKey} == ""
					</simple>
					<throwException
						exceptionType="cl.wom.exception.services.ServiceError"
						id="_throwException1" message="400" />
				</when>
				<otherwise id="_otherwise1">
					<setBody id="_setBody1">
						<simple>{{sql.getsubcriberBymsisdn}}</simple>
					</setBody>
					<!-- <to id="_to2" uri="jdbc:dataSourceBSCSDESA" /> -->
					<to id="_to3" uri="bean:clienteProcessor" />
					
				<!-- 	<when id="_when2">
						<simple>${body.msisdn} == null</simple>
						<log message="nullooooooo"></log>
						<to uri="bean:clienteProcessor" />

					</when> -->
					<when id="_when3">
						<simple>${body.msisdn} != null</simple>
						<to uri="velocity:velocity/netflixStart.vm" />
						<to uri="direct:bango" />
					</when>
				</otherwise>
			</choice>
			<setHeader headerName="Content-Type">
				<constant>application/json; charset=UTF-8</constant>
			</setHeader>
			<setHeader headerName="Encoding">
				<constant>UTF-8</constant>
			</setHeader>	
		
		</route>
		<!-- virtualizado, cuando se entrege el original se tiene que cambiar -->
		<route>
			<from uri="direct:bango" />

			<to uri="velocity:velocity/netflixResponse.vm" />
			<setHeader headerName="Content-Type">
				<constant>application/json; charset=UTF-8</constant>
			</setHeader>
			<setHeader headerName="Encoding">
				<constant>UTF-8</constant>
			</setHeader>	
		</route>
	</camelContext>
</beans>
