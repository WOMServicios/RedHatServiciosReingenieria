<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://camel.apache.org/schema/spring 
	http://camel.apache.org/schema/spring/camel-spring.xsd">

	<bean id="clienteProcessor" class="cl.wom.util.ClienteProcessor">
	</bean>

	<camelContext
		id="camelContext-0423f187-258d-455e-82e8-783bcda7f4af"
		xmlns="http://camel.apache.org/schema/spring">
		<!--Cargamos el archivo de propiedades correspondiente al ambiente NOTA: 
			esto debe ser descomentado para subir a openshift, se debe eliminar el espacio 
			entre "$ {" y comentar o eliminar la linea donde se encuentra en duro el 
			archivo properties. Por defecto en opensfhit es develop -->
		<!--<propertyPlaceholder id="placeholder" location="classpath:$ {env:PFX_ENV}.properties"/> -->

		<propertyPlaceholder id="placeholder"
			location="classpath:application.properties,classpath:sql.properties" />

		<onException>
			<exception>cl.wom.exception.services.ServiceError</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<log message="ERROR: ${exception.message}"></log>
			<setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
				<simple>${exception.codigoError}</simple>
			</setHeader>
			<setHeader headerName="codigoError">
				<simple>${exception.codigoError}</simple>
			</setHeader>
			<setHeader headerName="messageError">
				<simple>${exception.message}</simple>
			</setHeader>
			<setHeader headerName="Content-Type">
				<constant>application/json</constant>
			</setHeader>
			<to uri="velocity:velocity/ErrorHttp.vm" />

		</onException>

		<!-- getcarrierbillingoffers -->
		<route streamCache="true">
			<from
				uri="restlet:http://{{rest.service.host}}:{{rest.service.port}}{{rest.service.resource}}?restletMethod=post" />


			<setHeader headerName="Accept">
				<constant>application/json</constant>
			</setHeader>
			<setHeader headerName="Content-Type">
				<constant>application/json</constant>
			</setHeader>
			<doTry>
				<setHeader headerName="msisdn">
					<jsonpath resultType="java.lang.String">$.msisdn</jsonpath>
				</setHeader>
				<doCatch>
					<exception>org.apache.camel.ExpressionEvaluationException
					</exception>
					<setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
						<simple>400</simple>
					</setHeader>
					<to uri="velocity:velocity/400.vm" />
					<setHeader headerName="Content-Type">
						<constant>application/json</constant>
					</setHeader>
					<stop />
				</doCatch>
			</doTry>
			<choice>
				<when>
					<simple>${headers.msisdn} == ""</simple>
					<throwException
						exceptionType="cl.wom.exception.services.ServiceError"
						message="400" />
				</when>

				<when>
					<simple>${headers.msisdn} != ""</simple>

					<setBody>
						<simple>{{sql.getInfoSuscriptorCarrierBilling}}</simple>
					</setBody>
					<setHeader headerName="database">
						<constant>BSCSDESA</constant>
					</setHeader>
					<to uri="bean:clienteProcessor" />
					<when>
						<simple>${body} != null</simple>
						<!-- seteo de properties, en donde se almacenaran variables globales 
							para reutilizacion -->


						<setProperty propertyName="customerIdProperty">
							<simple>${body.customerId}</simple>
						</setProperty>

						<setProperty propertyName="customerIdHighProperty">
							<simple>${body.customerIdHigh}</simple>
						</setProperty>
						<setProperty propertyName="numCelularProperty">
							<simple>${body.numCelular}</simple>
						</setProperty>

						<setProperty propertyName="antiguedadProperty">
							<simple>${body.antiguedad}</simple>
						</setProperty>
						<setProperty propertyName="contractIdProperty">
							<simple>${body.contractId}</simple>
						</setProperty>
						<setProperty propertyName="ratePlanProperty">
							<simple>${body.rateplan}</simple>
						</setProperty>

						<setProperty propertyName="cargoBasicoProperty">
							<simple>${body.cargoBasico}</simple>
						</setProperty>

						<log
							message="cargo basigo ::${property.cargoBasicoProperty}  antiguedad::${property.antiguedadProperty}"></log>
						<!-- query devolvera 0 / 1 si es cero se saldra getSuscripcionesCarrierExist -->

						<setBody>
							<simple>{{sql.getSuscripcionesCarrierExist}}</simple>
						</setBody>

						<setHeader headerName="database">
							<constant>WAPPLDESA</constant>
						</setHeader>
						<when>
							<!-- <simple>${body} != 0</simple> cambiar -->
							<simple>${body} == 0</simple>
							<to uri="velocity:velocity/getSuscripcionesCarrierExist.vm" />
						</when>
						<when>
							<!-- <simple>${body} == 0</simple> cambiar -->
							<simple>${body} != 0</simple>
							<!-- getCustomerContractMoreOld para ver si el cliente posee una subcripion 
								activa -busca el msisdn mas antiguo de la cuenta -->
							<setHeader headerName="database">
								<constant>getCustomerContractMoreOld</constant>
							</setHeader>
							<setBody>
								<simple>{{sql.getCustomerContractMoreOld}}</simple>
							</setBody>
							<to uri="bean:clienteProcessor" />


							<setProperty propertyName="dnNumIdHighProperty">
								<simple>${body}</simple>
							</setProperty>

							<when>
								<simple>${property.dnNumIdHighProperty} != null</simple>

								<!-- valida la cuenta pagadora getCustomerPagador -->

								<setBody>
									<simple>{{sql.getCustomerPagador}}</simple>
								</setBody>
								<setHeader headerName="database">
									<constant>getCustomerPagador</constant>
								</setHeader>


								<to uri="bean:clienteProcessor" />
								<when>
									<simple>${body} != null</simple>

									<setProperty propertyName="customerIdProperty">
										<simple>${body}</simple>
									</setProperty>

									<setBody>
										<simple>{{sql.getofertacarrier}}</simple>
									</setBody>
									<setHeader headerName="database">
										<constant>getofertacarrier</constant>
									</setHeader>

									<to uri="bean:clienteProcessor" />

									<setProperty propertyName="idOfertaProperty">
										<simple>${body.idOferta}</simple>
									</setProperty>
									<setProperty propertyName="desOfertaProperty">
										<simple>${body.desOferta}</simple>
									</setProperty>

									

								<!-- 	variable para hacer prueba y no duplicar pk -->
									<setProperty propertyName="fechaPruebaProperty">
										<simple>${date:now:HH:mm:ssZ}</simple>
									</setProperty>
									<setBody>
										<simple>{{sql.insertaregelegcarrierbilling}}</simple>
									</setBody>
									<setHeader headerName="database">
										<constant>insertaregelegcarrierbilling</constant>
									</setHeader>
									<to uri="bean:clienteProcessor" />
									<setHeader headerName="idOferta">
										<simple>${property.idOfertaProperty}</simple>
									</setHeader>
									<setHeader headerName="desOferta">
										<simple>${property.desOfertaProperty}</simple>
									</setHeader>
									<to uri="velocity:velocity/Success.vm" />
								</when>
							</when>


						</when>

					</when>

				</when>

			</choice>
			<setHeader headerName="Content-Type">
				<constant>application/json; charset=UTF-8</constant>
			</setHeader>
			<setHeader headerName="Encoding">
				<constant>UTF-8</constant>
			</setHeader>
		</route>
	</camelContext>
</beans>