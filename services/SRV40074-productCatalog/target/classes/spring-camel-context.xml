<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://camel.apache.org/schema/spring 
    http://camel.apache.org/schema/spring/camel-spring.xsd">
    
    <import resource="bean-definitions.xml"/>
    
    <camelContext  xmlns="http://camel.apache.org/schema/spring">
<!-- 		<propertyPlaceholder id="placeholder" location="classpath:application.properties"/> 		 -->
<propertyPlaceholder id="placeholder"
                location="classpath:${env:APP_ENV}.properties, classpath:${env:SQL_ENV}.properties"/>

    <!-- Control de errores -->
	<onException>
		    <exception>java.lang.Exception</exception>
		    <handled><simple>true</simple></handled>
		    
		    <setHeader headerName="errorcode"><constant>500</constant></setHeader>
		    <setHeader headerName="errorMessage"><simple>${exception.message.replaceAll('(\\r|\\n)','').replaceAll('\"','')}</simple></setHeader>

		    <log message="error: ${exception.message}"></log>
		    <to uri="velocity:velocity/response-sql-error.vm"/>
		    <setHeader headerName="Content-Type"><constant>application/json</constant></setHeader>
	</onException>
		       
<!--         	TODO: Cambiar nombre del servicio por el propocionado por Arquitectura -->
	<route>
			<from uri="jetty:{{camel.from.endpoint}}"/>
			<log message="offerId: ${headers.productOffering.offerId}"></log>
			<choice>
					<when>
						<simple>${headers.productOffering.offerId} == null and ${headers.productOffering.shortDesc} == null and ${headers.productOffering.marketSeg} == null </simple>
					<to uri="velocity:velocity/response-nodata.vm"></to>
					<setHeader headerName="Content-Type"><constant>application/json</constant></setHeader>		
					</when>
					<when>
						<simple>${headers.productOffering.offerId} == "" and ${headers.productOffering.shortDesc} == "" and ${headers.productOffering.marketSeg} == "" </simple>
					<to uri="velocity:velocity/response-nodata.vm"></to>
					<setHeader headerName="Content-Type"><constant>application/json</constant></setHeader>
					</when>
			 
		     		<otherwise>
					<bean ref="sqlFormatterProcessor" method="sqlParserProductOffering"></bean>
		            
		            <choice>
		            	<when>
		            		<simple>${body} == ""</simple>
		            		<to uri="velocity:velocity/response-sql-nodata.vm"></to>
		            		<setHeader headerName="Content-Type"><constant>application/json</constant></setHeader>	            		
		            	</when>
		            </choice>           
		            <setHeader headerName="Content-Type"><constant>application/json</constant></setHeader>
		            </otherwise>
          </choice>
	</route>
    </camelContext>
</beans>