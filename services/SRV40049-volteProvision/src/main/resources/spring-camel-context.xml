<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://camel.apache.org/schema/spring 
    http://camel.apache.org/schema/spring/camel-spring.xsd">


	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@10.120.148.136:1521:WAPPLDESA" />
		<property name="username" value="VOLTEPROVISIONING" />
		<property name="password" value="jng7##lpjnby209" />
	</bean>
	<bean id="dSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@cluxds03:1550:BSCSDESA" />
		<property name="username" value="VOLTEACTSERVICIOS" />
		<property name="password" value="lllg7##lpjnt6798" />
	</bean>

	<!-- configure the Camel SQL component to use the JDBC data source -->
	<bean class="org.apache.camel.component.sql.SqlComponent" id="sql">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<import resource="bean-definitions.xml" />
	
	<camelContext
		xmlns="http://camel.apache.org/schema/spring"
		xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
		xmlns:ns="http://ws.wom.cl/wom/neg/serviceordermanagement/volteprovision/v/1">

		<propertyPlaceholder id="placeholder"
			location="classpath:application.properties" />
		<onException>
			<exception>cl.wom.middleware.proxy.ServiceError</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<log loggingLevel="ERROR" message="error" />
			<setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
				<simple>${exception.codigoError}</simple>
			</setHeader>
			<setHeader headerName="messageError">
				<simple>Bad Request - ${exception.message}</simple>
			</setHeader>
			<log message=" test error:${exception.codigoError}"></log>
			<to uri="velocity:velocity/activateVoLTE_ERROR.vm" />
		</onException>

		<route streamCache="true">
			<from
				uri="cxf:http://0.0.0.0:8087/producer/VoLTE/Services/ProvisioningWS/ActivateVoLTE/?		
			wsdlURL=classpath:wsdl/activateVoLTE.wsdl&amp;
			serviceName={http://ws.wom.cl/wom/neg/serviceordermanagement/volteprovision/v/1}activateVoLTE&amp;
			portName={http://ws.wom.cl/wom/neg/serviceordermanagement/volteprovision/v/1}activateVoLTESOAP&amp;
			dataFormat=MESSAGE" />

			<setHeader headerName="msisdn">
				<xpath resultType="java.lang.Integer">/soapenv:Envelope/soapenv:Body/ns:activateVoLTE/param/msisdn/text()
				</xpath>
			</setHeader>
			<setHeader headerName="imsi">
				<xpath resultType="java.lang.Long">/soapenv:Envelope/soapenv:Body/ns:activateVoLTE/param/imsi/text()
				</xpath>
			</setHeader>
			
			<log message="headers.msisdn: ${headers.msisdn}"></log>
			<log message="headers.imsi: ${headers.imsi}"></log>

			<choice>
				<when>
					<simple>${headers.msisdn} == 0 || ${headers.imsi} == 0 </simple>
					<log message=" test error  \n\${headers.imsi}"></log>
					<throwException
						exceptionType="cl.wom.middleware.proxy.ServiceError" message="400" />
				</when>
			</choice>
			
			<!-- TODO: definir parametros de entrada --> 
			<!-- Invocación al procedimiento de auditorio INICIO -->
			<to uri="direct:spg_new_request_pr"></to>

			<!-- Invocación telnet-->
			
			
			<setBody><simple>SPGCMD:AUTOPROV:MSISDN=569${headers.msisdn};</simple></setBody>
<!-- 			<to uri="netty4:tcp://10.120.241.42:8887" /> -->
			<to uri="netty4:tcp://0.0.0.0:9999" />

			
			
			<log message="retorno telnet RESP_CODE: ${body.split('=')[1]}"></log>
			<log message="retorno telnet RESP_MSG: ${body.split('=')[2]}"></log>
					
<!-- 			TODO: TOMAR LOS PARAMETROS DENTRO DE UN PROPERTIES -->
			<setHeader headerName="telnet_code">
				<simple >${body.split('=')[1]}</simple>
			</setHeader>
			<setHeader headerName="telnet_err_code">
				<simple >${headers.telnet_code.split(',')[0]}</simple>
			</setHeader>
			<log message="telnet code: ${headers.telnet_err_code}"></log>
			<setHeader headerName="telnet_err_msg">
				<simple >${body.split('=')[2]}</simple>
			</setHeader>

			
			<choice>
				<when>
					<simple>${headers.telnet_err_code} != 0 || ${headers.telnet_err_msg} != "SUCCESS"</simple>
					
	<!-- 				TODO: CREAR NUEVAS EXCEPCIONES  -->
					
					<when>
						<simple>${headers.telnet_err_code} == 1003 || ${headers.telnet_err_msg} != "SUCCESS;" </simple>
						<to uri= "direct:spg_set_bscs_status_pr"></to>

						<log message="CAE EN LA SEGUNDA EXCEPCION"></log>
						<log message="valor en telnet code ${headers.telnet_err_code}"></log>
						<log message="valor en telnet msg ${headers.telnet_msg_code}"></log>
						
						<throwException exceptionType="cl.wom.middleware.proxy.ServiceError" message="400" />	
					</when>
					
					<otherwise>
						<to uri= "direct:spg_set_bscs_status_pr"></to>
						<log message="CAE EN LA PENULTIMA EXCEPCION"></log>
						<throwException exceptionType="cl.wom.middleware.proxy.ServiceError" message="400" />
					</otherwise>
					
				</when>
			 </choice>
			 
			 <to uri="direct:spg_set_prov_status_pr"></to>
			 <to uri="direct:spg_add_bscs_services_pr"></to>
			 
			 <choice>
			 	<when>
			 		<simple>${headers.spg_add_bscs_services_pr_code} != 0 || ${headers.spg_add_bscs_services_pr_msg} != "SUCCESS"</simple>
					<log message="CAE EN LA ULTIMA EXCEPCION"></log>
					<throwException exceptionType="cl.wom.middleware.proxy.ServiceError" message="400" />
			 	</when>
			 </choice>
			 
			 <to uri= "direct:spg_set_bscs_status_pr"></to>

			
			<to uri="velocity:velocity/200activateVoLTE.vm" />

			<log message="Finalizando proceso"></log>
		</route>

		<route>
			<from uri="direct:spg_new_request_pr" />


  				<to uri="sql-stored:SPG_PROVISIONING_REQUEST_PG.SPG_NEW_REQUEST_PR(DOUBLE ${headers.msisdn},DOUBLE ${headers.imsi},OUT INTEGER sn_cod_return,OUT VARCHAR sv_msg_return,OUT VARCHAR sn_spg_request_id )?dataSource=dataSource"/>

					<setHeader headerName="new_request_psg_request_id">
									<simple resultType="java.lang.Long">${body[sn_spg_request_id]}</simple>
					</setHeader>
					<log message="id return procedure1: ${headers.new_request_psg_request_id}"></log>
 					<setHeader headerName="new_request_cod_return">
									<simple resultType="java.lang.Integer">${body.[sn_cod_return]}</simple>
					</setHeader>
					<log message="cod return procedure1: ${headers.new_request_cod_return}"></log>
 					<setHeader headerName="new_request_msg_return">
									<simple resultType="java.lang.String">${body.[sv_msg_return]}</simple>
					</setHeader>
					<log message="msg return procedure1: ${headers.new_request_msg_return}"></log>
		</route>
		
		
		<route>
<!-- 			<from uri="netty4:tcp://10.120.241.42:8887"/> -->
			<from uri="netty4:tcp://0.0.0.0:9999"/>

<!-- 			TODO: CAMBIAR Y AÑADIR EXPRESION REGULAR PARA LA CADENA -->

<!-- 			<setBody><constant>SPGCMD:AUTOPROV:RESP_CODE=0=SUCCESS</constant></setBody> -->
			<setBody><constant>SPGCMD:AUTOPROV:RESP_CODE=0,RESP_MSG=SUCCESS</constant></setBody>
		</route>
		
		<route>
			<from uri="direct:spg_set_bscs_status_pr" />
			  		<to uri="sql-stored:SPG_PROVISIONING_REQUEST_PG.SPG_SET_BSCS_STATUS_PR(DOUBLE ${headers.new_request_psg_request_id},INTEGER ${headers.new_request_cod_return},VARCHAR ${headers.new_request_msg_return},OUT INTEGER bscs_cod_status,OUT VARCHAR bscs_msg_status)?dataSource=dataSource"/>
				
				<!-- TODO: cambiar los headers ACA!!! -->
 					<setHeader headerName="bscs_cod_status">
									<simple resultType="java.lang.Integer">${body.[bscs_cod_status]}</simple>
					</setHeader>
					<log message="cod return procedure2: ${headers.bscs_cod_status}"></log>
 					<setHeader headerName="bscs_msg_status">
									<simple resultType="java.lang.String">${body.[bscs_msg_status]}</simple>
					</setHeader>
					<log message="msg return procedure2: ${headers.bscs_msg_status}"></log>
								
		</route>
		
		<route>
			<from uri="direct:spg_set_prov_status_pr"/>
					<to uri="sql-stored:SPG_PROVISIONING_REQUEST_PG.SPG_SET_PROV_STATUS_PR(DOUBLE ${headers.new_request_psg_request_id},INTEGER ${headers.new_request_cod_return},VARCHAR ${headers.new_request_msg_return},OUT INTEGER prov_cod_status,OUT VARCHAR prov_msg_status)?dataSource=dataSource"/>
				
				<!-- TODO: cambiar los headers ACA!!! -->
 					<setHeader headerName="prov_cod_status">
									<simple resultType="java.lang.Integer">${body.[prov_cod_status]}</simple>
					</setHeader>
					<log message="cod return procedure3: ${headers.prov_cod_status}"></log>
 					<setHeader headerName="prov_msg_status">
									<simple resultType="java.lang.String">${body.[prov_msg_status]}</simple>
					</setHeader>
					<log message="msg return procedure3: ${headers.prov_msg_status}"></log>		
		</route>
		
		
		<route>
			<from uri="direct:spg_add_bscs_services_pr" />
					<to uri="sql-stored:SPG_SERVICE_ACTIVATION_PG.SPG_ADD_BSCS_SERVICES_PR(INTEGER ${headers.msisdn},OUT INTEGER bscs_cod_services,OUT VARCHAR bscs_msg_services)?dataSource=dSource"/>
				
<!-- 				TODO: cambiar los headers ACA!!! -->
 					<setHeader headerName="bscs_cod_services">
									<simple resultType="java.lang.Integer">${body.[bscs_cod_services]}</simple>
					</setHeader>
					<log message="cod return procedure4: ${headers.bscs_cod_services}"></log>
 					<setHeader headerName="bscs_msg_services">
									<simple resultType="java.lang.String">${body.[bscs_msg_services]}</simple>
					</setHeader>
					<log message="msg return procedure4: ${headers.bscs_msg_services}"></log>

		</route>
		
		

	</camelContext>
</beans>